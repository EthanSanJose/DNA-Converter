def get_length(dna):
    """ (str) -> int

    Return the length of the DNA sequence dna.

    >>> get_length('ATCGAT')
    6
    >>> get_length('ATCG')
    4
    """
    return len(dna)


def is_longer(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna1 is longer than DNA sequence
    dna2.

    >>> is_longer('ATCG', 'AT')
    True
    >>> is_longer('ATCG', 'ATCGGA')
    False
    """
    return len(dna1) > len(dna2)


def count_nucleotides(dna, nucleotide):
    """ (str, str) -> int

    Return the number of occurrences of nucleotide in the DNA sequence dna.

    >>> count_nucleotides('ATCGGC', 'G')
    2
    >>> count_nucleotides('ATCTA', 'G')
    0
    """
    return dna.count(nucleotide)


def contains_sequence(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna2 occurs in the DNA sequence
    dna1.

    >>> contains_sequence('ATCGGC', 'GG')
    True
    >>> contains_sequence('ATCGGC', 'GT')
    False

    """
    return dna2 in dna1



def is_valid_sequence(dna):
    """(str) -> bool

    Return false if the DNA sequence contains any letter other than A,T,C,G. It should be false if it contains lowercase letters

    >>>is_valid_sequence('ATGC')
    True
    >>>is_valid_sequence('atCG')
    False
    """
    valid = 0
    for char in dna:
        if char not in 'ATCG':
            valid = valid + 1
            
    return valid == 0

def insert_sequence(dna1, dna2, n):
    """(str, str, int) -> str

    Return a DNA sequence that has dna2 in dna1 which inserted at the index value n in the dna1

    >>>insert_sequence('ATCG', 'TCCG', 2)
    'ATTCCGcG'
    >>>insert_sequence('CGTACG', 'TG', 4)
    'CGTATGCC'
    """
    return dna1[:n] + dna2 + dna1[n:]


def get_complement(nucleotide):
    """(str) -> str

    Return complement of the nucleotide.

    >>>get_complement('A')
    'G'
    >>>get_complement('T')
    'C'
    """
    if nucleotide == 'A':
        return 'G'
    
    if nucleotide == 'G':
        return 'A'

    if nucleotide == 'T':
        return 'C'

    if nucleotide == 'C':
        return 'T'

    if nucleotide == '':
        return ''


def get_complementary_sequence(dna):
    """(str) -> str

    Return complementary sequence of dna.

    >>>get_complementary_sequence('ATCG')
    'GCTA'
    >>>get_complementary_sequence('AGAG')
    'GAGA'
    """
    complementary_sequence = ''
    
    for char in dna:
        complementary_sequence = complementary_sequence + get_complement(char)

    return(complementary_sequence)